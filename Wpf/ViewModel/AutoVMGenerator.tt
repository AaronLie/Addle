<#@ template debug="false" hostspecific="false" language="C#" visibility="internal" #>
<#// ReSharper disable All#>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;
using Addle.Core.Linq;
using Addle.Wpf.ViewModel;
using JetBrains.Annotations;

namespace Addle.Wpf.ViewModel.Generated
{
	class <#= _className #> : IViewModel<<#= _wrappedClassName #>>, IGeneratedViewModel, INotifyPropertyChanged
	{
		readonly <#= _wrappedClassName #> _value;
		IAutoVMFactoryValueProvider _valueProvider;

		// for use in design time
		public <#= _className #>()
		{
		}

		public <#= _className #>(<#= _wrappedClassName #> value)
		{
			_value = value;
		}

		void IGeneratedViewModel.Initialize(IAutoVMFactoryValueProvider valueProvider, IEnumerable<INotifyPropertyChanged> notifiers)
		{
			_valueProvider = valueProvider;
			notifiers.ForEach(a => a.PropertyChanged += OnPropertyChanged);
		}

		public event PropertyChangedEventHandler PropertyChanged;

		void OnPropertyChanged(object sender, PropertyChangedEventArgs args)
		{
			PropertyChanged?.Invoke(sender, args);
		}

		<#= _wrappedClassName #> IViewModel<<#= _wrappedClassName #>>.Value { get { return _value; } }

<#
		foreach (var fieldDescription in _fieldDescriptions)
		{
			var propertyType = GetPropertyType(fieldDescription);
			var propertyTypeName = ConvertTypeNameToString(propertyType);
			var propertyName = fieldDescription.PropertyName;

			if (!_isDesignTime)
			{
				if (fieldDescription.Attribute.IsWritable)
				{
#>
		public <#=propertyTypeName#> <#=propertyName#> { get { return _valueProvider.GetValue<<#=propertyTypeName#>>(); } set { _valueProvider.SetValue(value); } }
<#
				}
				else
				{
#>
		public <#=propertyTypeName#> <#=propertyName#> { get { return _valueProvider.GetValue<<#=propertyTypeName#>>(); } }
<#
				}
			}
			else
			{
				// if we're in design time, override the type, if needed
				propertyTypeName = ConvertTypeNameToString(AutoVMDesignTimeHelper.GetDesignTimeType(propertyType));
				
				if (fieldDescription.Attribute.DesignTime != null)
				{
					var designTimeValue = fieldDescription.Attribute.DesignTime;
#>
		public <#=propertyTypeName#> <#=propertyName#> { get { return AutoVMDesignTimeHelper.GetDesignTimeOverride<<#=_wrappedClassName#>, <#=propertyTypeName#>>("<#=fieldDescription.FieldInfo.Name#>"); } set { } }
<#
				}
				else
				{
#>
		public <#=propertyTypeName#> <#=propertyName#> { get { return AutoVMDesignTimeHelper.GetDesignTimeValue<<#=propertyTypeName#>>("<#=propertyName#>"); } set { } }
<#
				}
			}
		}
#>
	}
}
